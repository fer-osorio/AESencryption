/*
 * AES Key Expansion Arrays - FIPS 197 Standard Reference
 *
 * This file contains the complete key expansion for all three AES variants:
 * - AES-128: 128-bit key -> 11 round keys (176 bytes total)
 * - AES-192: 192-bit key -> 13 round keys (208 bytes total)
 * - AES-256: 256-bit key -> 15 round keys (240 bytes total)
 *
 * All arrays use byte representation in big-endian format.
 */

// =============================================================================
// AES-128 Key Expansion (Nk=4, Nr=10)
// =============================================================================

namespace Example {

namespace Key{

const unsigned char aes128_key[] = {
	0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
	0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};
const unsigned char aes192_key[] = {
	0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52,
	0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
	0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b
};
const unsigned char aes256_key[] = {
	0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
	0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
	0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
	0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

}

namespace ExpandedKey{

const unsigned char aes128_key_expanded[176] = {
    // w[0] to w[3] - Original key
    0x2b, 0x7e, 0x15, 0x16,  // w[0]
    0x28, 0xae, 0xd2, 0xa6,  // w[1]
    0xab, 0xf7, 0x15, 0x88,  // w[2]
    0x09, 0xcf, 0x4f, 0x3c,  // w[3]

    // Round 1 keys (w[4] to w[7])
    0xa0, 0xfa, 0xfe, 0x17,  // w[4]
    0x88, 0x54, 0x2c, 0xb1,  // w[5]
    0x23, 0xa3, 0x39, 0x39,  // w[6]
    0x2a, 0x6c, 0x76, 0x05,  // w[7]

    // Round 2 keys (w[8] to w[11])
    0xf2, 0xc2, 0x95, 0xf2,  // w[8]
    0x7a, 0x96, 0xb9, 0x43,  // w[9]
    0x59, 0x35, 0x80, 0x7a,  // w[10]
    0x73, 0x59, 0xf6, 0x7f,  // w[11]

    // Round 3 keys (w[12] to w[15])
    0x3d, 0x80, 0x47, 0x7d,  // w[12]
    0x47, 0x16, 0xfe, 0x3e,  // w[13]
    0x1e, 0x23, 0x7e, 0x44,  // w[14]
    0x6d, 0x7a, 0x88, 0x3b,  // w[15]

    // Round 4 keys (w[16] to w[19])
    0xef, 0x44, 0xa5, 0x41,  // w[16]
    0xa8, 0x52, 0x5b, 0x7f,  // w[17]
    0xb6, 0x71, 0x25, 0x3b,  // w[18]
    0xdb, 0x0b, 0xad, 0x00,  // w[19]

    // Round 5 keys (w[20] to w[23])
    0xd4, 0xd1, 0xc6, 0xf8,  // w[20]
    0x7c, 0x83, 0x9d, 0x87,  // w[21]
    0xca, 0xf2, 0xb8, 0xbc,  // w[22]
    0x11, 0xf9, 0x15, 0xbc,  // w[23]

    // Round 6 keys (w[24] to w[27])
    0x6d, 0x88, 0xa3, 0x7a,  // w[24]
    0x11, 0x0b, 0x3e, 0xfd,  // w[25]
    0xdb, 0xf9, 0x86, 0x41,  // w[26]
    0xca, 0x00, 0x93, 0xfd,  // w[27]

    // Round 7 keys (w[28] to w[31])
    0x4e, 0x54, 0xf7, 0x0e,  // w[28]
    0x5f, 0x5f, 0xc9, 0xf3,  // w[29]
    0x84, 0xa6, 0x4f, 0xb2,  // w[30]
    0x4e, 0xa6, 0xdc, 0x4f,  // w[31]

    // Round 8 keys (w[32] to w[35])
    0xea, 0xd2, 0x73, 0x21,  // w[32]
    0xb5, 0x8d, 0xba, 0xd2,  // w[33]
    0x31, 0x2b, 0xf5, 0x60,  // w[34]
    0x7f, 0x8d, 0x29, 0x2f,  // w[35]

    // Round 9 keys (w[36] to w[39])
    0xac, 0x77, 0x66, 0xf3,  // w[36]
    0x19, 0xfa, 0xdc, 0x21,  // w[37]
    0x28, 0xd1, 0x29, 0x41,  // w[38]
    0x57, 0x5c, 0x00, 0x6e,  // w[39]

    // Round 10 keys (w[40] to w[43])
    0xd0, 0x14, 0xf9, 0xa8,  // w[40]
    0xc9, 0xee, 0x25, 0x89,  // w[41]
    0xe1, 0x3f, 0x0c, 0xc8,  // w[42]
    0xb6, 0x63, 0x0c, 0xa6   // w[43]
};

// =============================================================================
// AES-192 Key Expansion (Nk=6, Nr=12)
// =============================================================================

const unsigned char aes192_key_expanded[208] = {
    // w[0] to w[5] - Original key
    0x8e, 0x73, 0xb0, 0xf7,  // w[0]
    0xda, 0x0e, 0x64, 0x52,  // w[1]
    0xc8, 0x10, 0xf3, 0x2b,  // w[2]
    0x80, 0x90, 0x79, 0xe5,  // w[3]
    0x62, 0xf8, 0xea, 0xd2,  // w[4]
    0x52, 0x2c, 0x6b, 0x7b,  // w[5]

    // Round 1 keys (w[6] to w[11])
    0xfe, 0x0c, 0x91, 0xf7,  // w[6]
    0x24, 0x02, 0xf5, 0xa5,  // w[7]
    0xec, 0x12, 0x06, 0x8e,  // w[8]
    0x6c, 0x82, 0x7f, 0x6b,  // w[9]
    0x0e, 0x7a, 0x95, 0xb9,  // w[10]
    0x5c, 0x56, 0xfe, 0xc2,  // w[11]

    // Round 2 keys (w[12] to w[17])
    0x4d, 0xb7, 0xb4, 0xbd,  // w[12]
    0x69, 0xb5, 0x41, 0x18,  // w[13]
    0x85, 0xa7, 0x47, 0x96,  // w[14]
    0xe9, 0x25, 0x38, 0xfd,  // w[15]
    0xe7, 0x5f, 0xad, 0x44,  // w[16]
    0xbb, 0x09, 0x53, 0x86,  // w[17]

    // Round 3 keys (w[18] to w[23])
    0x48, 0x5a, 0xf0, 0x57,  // w[18]
    0x21, 0xef, 0xb1, 0x4f,  // w[19]
    0xa4, 0x48, 0xf6, 0xd9,  // w[20]
    0x4d, 0x6d, 0xce, 0x24,  // w[21]
    0xaa, 0x32, 0x63, 0x60,  // w[22]
    0x11, 0x3b, 0x30, 0xe6,  // w[23]

    // Round 4 keys (w[24] to w[29])
    0xa2, 0x5e, 0x7e, 0xd5,  // w[24]
    0x83, 0xb1, 0xcf, 0x9a,  // w[25]
    0x27, 0xf9, 0x39, 0x43,  // w[26]
    0x6a, 0x94, 0xf7, 0x67,  // w[27]
    0xc0, 0xa6, 0x94, 0x07,  // w[28]
    0xd1, 0x9d, 0xa4, 0xe1,  // w[29]

    // Round 5 keys (w[30] to w[35])
    0xec, 0x17, 0x86, 0xeb,  // w[30]
    0x6f, 0xa6, 0x49, 0x71,  // w[31]
    0x48, 0x5f, 0x70, 0x32,  // w[32]
    0x22, 0xcb, 0x87, 0x55,  // w[33]
    0xe2, 0x6d, 0x13, 0x52,  // w[34]
    0x33, 0xf0, 0xb7, 0xb3,  // w[35]

    // Round 6 keys (w[36] to w[41])
    0x40, 0xbe, 0xeb, 0x28,  // w[36]
    0x2f, 0x18, 0xa2, 0x59,  // w[37]
    0x67, 0x47, 0xd2, 0x6b,  // w[38]
    0x45, 0x8c, 0x55, 0x3e,  // w[39]
    0xa7, 0xe1, 0x46, 0x6c,  // w[40]
    0x94, 0x11, 0xf1, 0xdf,  // w[41]

    // Round 7 keys (w[42] to w[47])
    0x82, 0x1f, 0x75, 0x0a,  // w[42]
    0xad, 0x07, 0xd7, 0x53,  // w[43]
    0xca, 0x40, 0x05, 0x38,  // w[44]
    0x8f, 0xcc, 0x50, 0x06,  // w[45]
    0x28, 0x2d, 0x16, 0x6a,  // w[46]
    0xbc, 0x3c, 0xe7, 0xb5,  // w[47]

    // Round 8 keys (w[48] to w[51]) - Final round for AES-192
    0xe9, 0x8b, 0xa0, 0x6f,  // w[48]
    0x44, 0x8c, 0x77, 0x3c,  // w[49]
    0x8e, 0xcc, 0x72, 0x04,  // w[50]
    0x01, 0x00, 0x22, 0x02   // w[51]
};

// =============================================================================
// AES-256 Key Expansion (Nk=8, Nr=14)
// =============================================================================

const unsigned char aes256_key_expanded[240] = {
    // w[0] to w[7] - Original key
    0x60, 0x3d, 0xeb, 0x10,  // w[0]
    0x15, 0xca, 0x71, 0xbe,  // w[1]
    0x2b, 0x73, 0xae, 0xf0,  // w[2]
    0x85, 0x7d, 0x77, 0x81,  // w[3]
    0x1f, 0x35, 0x2c, 0x07,  // w[4]
    0x3b, 0x61, 0x08, 0xd7,  // w[5]
    0x2d, 0x98, 0x10, 0xa3,  // w[6]
    0x09, 0x14, 0xdf, 0xf4,  // w[7]

    // Round 1 keys (w[8] to w[15])
    0x9b, 0xa3, 0x54, 0x11,  // w[8]
    0x8e, 0x69, 0x25, 0xaf,  // w[9]
    0xa5, 0x1a, 0x8b, 0x5f,  // w[10]
    0x20, 0x67, 0xfc, 0xde,  // w[11]
    0xa8, 0xb0, 0x9c, 0x1a,  // w[12]
    0x93, 0xd1, 0x94, 0xcd,  // w[13]
    0xbe, 0x49, 0x84, 0x6e,  // w[14]
    0xb7, 0x5d, 0x5b, 0x9a,  // w[15]

    // Round 2 keys (w[16] to w[23])
    0xd5, 0x9a, 0xec, 0xb8,  // w[16]
    0x5b, 0xf3, 0xc9, 0x17,  // w[17]
    0xfe, 0xe9, 0x42, 0x48,  // w[18]
    0xde, 0x8e, 0xbe, 0x96,  // w[19]
    0xb5, 0xa9, 0x32, 0x8a,  // w[20]
    0x26, 0x78, 0xa6, 0x47,  // w[21]
    0x98, 0x31, 0x22, 0x29,  // w[22]
    0x2f, 0x6c, 0x79, 0xb3,  // w[23]

    // Round 3 keys (w[24] to w[31])
    0x81, 0x2c, 0x81, 0xad,  // w[24]
    0xda, 0xdf, 0x48, 0xba,  // w[25]
    0x24, 0x36, 0x0a, 0xf2,  // w[26]
    0xfa, 0xb8, 0xb4, 0x64,  // w[27]
    0x98, 0xc5, 0xbf, 0xc9,  // w[28]
    0xbe, 0xbd, 0x19, 0x8e,  // w[29]
    0x26, 0x8c, 0x3b, 0xa7,  // w[30]
    0x09, 0xe0, 0x42, 0x14,  // w[31]

    // Round 4 keys (w[32] to w[39])
    0x68, 0x00, 0x7b, 0xac,  // w[32]
    0xb2, 0xdf, 0x33, 0x16,  // w[33]
    0x96, 0xe9, 0x39, 0xe4,  // w[34]
    0x6c, 0x51, 0x8d, 0x80,  // w[35]
    0xc8, 0x14, 0xe2, 0x04,  // w[36]
    0x76, 0xa9, 0xfb, 0x8a,  // w[37]
    0x50, 0x25, 0xc0, 0x2d,  // w[38]
    0x59, 0xc5, 0x82, 0x39,  // w[39]

    // Round 5 keys (w[40] to w[47])
    0xde, 0x13, 0x69, 0x67,  // w[40]
    0x6c, 0xcc, 0x5a, 0x71,  // w[41]
    0xfa, 0x25, 0x63, 0x95,  // w[42]
    0x96, 0x74, 0xee, 0x15,  // w[43]
    0x58, 0x86, 0xca, 0x5d,  // w[44]
    0x2e, 0x2f, 0x31, 0xd7,  // w[45]
    0x7e, 0x0a, 0xf1, 0xfa,  // w[46]
    0x27, 0xcf, 0x73, 0xc3,  // w[47]

    // Round 6 keys (w[48] to w[55])
    0x74, 0x9c, 0x47, 0xab,  // w[48]
    0x18, 0x50, 0x1d, 0xda,  // w[49]
    0xe2, 0x75, 0x7e, 0x4f,  // w[50]
    0x74, 0x01, 0x90, 0x5a,  // w[51]
    0xca, 0xfa, 0xaa, 0xe3,  // w[52]
    0xe4, 0xd5, 0x9b, 0x34,  // w[53]
    0x9a, 0xdf, 0x6a, 0xce,  // w[54]
    0xbd, 0x10, 0x19, 0x0d,  // w[55]

    // Round 7 keys (w[56] to w[59]) - Final round for AES-256
    0xfe, 0x48, 0x90, 0xd1,  // w[56]
    0xe6, 0x18, 0x8d, 0x0b,  // w[57]
    0x04, 0x6d, 0xf3, 0x44,  // w[58]
    0x70, 0x6c, 0x63, 0x1e   // w[59]
};

}

namespace Vector{

const unsigned char key128[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
};
const unsigned char key192[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17
};
const unsigned char key256[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
	0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
	0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,
	0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
};

/******************************************************************************/

/*******************************************************************************
 * Plain text for example vectors
 * ****************************************************************************/

const unsigned char plainText[16] = {
	0x00,0x11,0x22,0x33,
	0x44,0x55,0x66,0x77,
	0x88,0x99,0xaa,0xbb,
	0xcc,0xdd,0xee,0xff
};

}
}

// For AES-128 (11 rounds: initial + 10 encryption rounds)
/*const unsigned char* get_aes128_round_key(int round) {
    return aes128_key_expanded + round*16;
}

// For AES-192 (13 rounds: initial + 12 encryption rounds)
const unsigned char* get_aes192_round_key(int round) {
    return aes192_key_expanded + round*16;
}

// For AES-256 (15 rounds: initial + 14 encryption rounds)
const unsigned char* get_aes256_round_key(int round) {
    return aes256_key_expanded + round*16;
}*/

// Verification function example
/*int verify_key_expansion(const unsigned char* your_key_expanded, const unsigned char* reference_key, int total_bytes) {
    for (int i = 0; i < total_bytes; i++) {
        if (your_key_expanded[i] != reference_key[i]) {
            printf("Mismatch at byte %d: got 0x%02x, expected 0x%02x\n",
                   i, your_key_expanded[i], reference_key[i]);
            return 0;  // Failed
        }
    }
    return 1;  // Success
}*/